  on:
    push:
      branches: [main, master]
    release:
        types: [published]
    workflow_dispatch: {}

  name: demo-website

  jobs:
    demo-website:
      runs-on: ubuntu-latest
      # Only restrict concurrency for non-PR jobs
      concurrency:
        group: quarto-website-${{ github.event_name != 'pull_request' || github.run_id }}
      permissions:
        contents: read
        pages: write
        id-token: write
      steps:
        - name: "Check out repository"
          uses: actions/checkout@v4

        # To render using knitr, we need a few more setup steps...
        # If we didn't want the examples to use `engine: knitr`, we could
        # skip a few of the setup steps.
        - name: "Setup pandoc"
          uses: r-lib/actions/setup-pandoc@v2

        - name: "Setup R"
          uses: r-lib/actions/setup-r@v2

        - name: "Setup R dependencies for Quarto's knitr engine"
          uses: r-lib/actions/setup-r-dependencies@v2
          with:
            packages: >
              cran::shinylive@0.3.0,
              any::knitr,
              any::rmarkdown,
              any::downlit,
              any::xml2,
              any::shiny,
              any::shinydashboard,
              any::DT,
              any::leaflet,
              any::ggplot2

        # Back to our regularly scheduled Quarto output
        - name: "Set up Quarto"
          uses: quarto-dev/quarto-actions/setup@v2

        # Render the Quarto files
        - name: "Render index file"
          uses: quarto-dev/quarto-actions/render@v2
          with:
            to: html
            path: index.qmd

        - name: "Render app file"
          uses: quarto-dev/quarto-actions/render@v2
          with:
            to: html
            path: random_sampling.qmd

        - name: "Render test file"
          uses: quarto-dev/quarto-actions/render@v2
          with:
            to: html
            path: test_shinylive.qmd

        # Add a step to check if the docs directory exists and copy files if needed
        - name: Ensure docs directory exists and contains rendered files
          run: |
            if [ ! -d "docs" ]; then
              echo "Creating docs directory..."
              mkdir -p docs
            fi

            # Check if HTML files exist in the root and copy them to docs if needed
            if [ -f "index.html" ] && [ ! -f "docs/index.html" ]; then
              echo "Copying index.html to docs directory..."
              cp index.html docs/
            fi

            if [ -f "random_sampling.html" ] && [ ! -f "docs/random_sampling.html" ]; then
              echo "Copying random_sampling.html to docs directory..."
              cp random_sampling.html docs/
            fi

            if [ -f "test_shinylive.html" ] && [ ! -f "docs/test_shinylive.html" ]; then
              echo "Copying test_shinylive.html to docs directory..."
              cp test_shinylive.html docs/
            fi

            # Copy any other necessary files (like _files directories)
            if [ -d "random_sampling_files" ] && [ ! -d "docs/random_sampling_files" ]; then
              echo "Copying random_sampling_files directory..."
              cp -r random_sampling_files docs/
            fi

            # List the contents of the docs directory
            echo "Contents of docs directory:"
            ls -la docs/

        # Upload a tar file that will work with GitHub Pages
        # Make sure to set a retention day to avoid running into a cap
        # This artifact shouldn't be required after deployment onto pages was a success.
        - name: Upload Pages artifact
          uses: actions/upload-pages-artifact@v3
          with:
            path: docs
            retention-days: 1

        # Use an Action deploy to push the artifact onto GitHub Pages
        # This requires the `Action` tab being structured to allow for deployment
        # instead of using `docs/` or the `gh-pages` branch of the repository
        - name: Deploy to GitHub Pages
          id: deployment
          uses: actions/deploy-pages@v4
---
title: "Random Soil Sampling Points Generator"
subtitle: "A simple Shiny application for generating random sampling points"
author: "Carlos Carbajal"
date: "2025-04-17"
format:
  html:
    grid:
      body-width: 1200px
    toc: true
    resources:
      - shinylive-sw.js
filters:
  - shinylive
---

```{shinylive-r}
#| !! shinylive warning !!: |
#|   shinylive does not work in self-contained HTML documents.
#|   Please set `embed-resources: false` in your metadata.
#| standalone: true
#| viewerHeight: 700
# Load required packages
library(shiny)
library(shinydashboard)
library(DT)
library(leaflet)
library(ggplot2)

# UI - Simplified for shinylive compatibility
ui <- dashboardPage(
  skin = "green",
  dashboardHeader(title = "Random Soil Sampling Tool"),

  dashboardSidebar(
    sidebarMenu(
      menuItem("Random Sampling", tabName = "sampling", icon = icon("map-marker")),
      menuItem("About", tabName = "about", icon = icon("info-circle"))
    )
  ),

  dashboardBody(
    tabItems(
      # Sampling Tab
      tabItem(tabName = "sampling",
        fluidRow(
          box(
            title = "Sampling Area", width = 6, status = "primary",
            h4("WGS84 (Lat/Long) Coordinates"),
            sliderInput("lonmin", "Longitude Minimum:", min = -180, max = 180, value = -1, step = 0.01),
            sliderInput("lonmax", "Longitude Maximum:", min = -180, max = 180, value = 1, step = 0.01),
            sliderInput("latmin", "Latitude Minimum:", min = -90, max = 90, value = -1, step = 0.01),
            sliderInput("latmax", "Latitude Maximum:", min = -90, max = 90, value = 1, step = 0.01)
          ),
          box(
            title = "Sampling Parameters", width = 6, status = "primary",
            numericInput("sampleSize", "Number of sample points:", 30, min = 5, max = 100),
            checkboxInput("addLabels", "Add point labels", TRUE),
            actionButton("runSampling", "Generate Random Points", icon = icon("play"),
                        class = "btn-success"),
            hr(),
            HTML("<p>Random sampling:</p>
                 <ul>
                 <li>Points are selected completely at random</li>
                 <li>Simple to implement but may miss important areas</li>
                 <li>Provides unbiased estimates of population parameters</li>
                 </ul>")
          )
        ),
        fluidRow(
          box(
            title = "Sampling Results", width = 12, status = "success",
            tabsetPanel(
              tabPanel("Map", leafletOutput("samplingMap", height = 500)),
              tabPanel("Data Table", DTOutput("samplingTable"))
            )
          )
        ),
        fluidRow(
          box(
            title = "Download Options", width = 12, status = "info",
            p("Note: In this shinylive demo, downloads are simulated."),
            downloadButton("downloadData", "Download Sample Data (CSV)", class = "btn-success")
          )
        )
      ),

      # About Tab
      tabItem(tabName = "about",
        fluidRow(
          box(
            title = "About This App", width = 12, status = "primary",
            p("This is a simple application for generating random sampling points for soil surveys or other field sampling designs."),
            p("The app is built with Shiny and runs entirely in your browser using shinylive, without requiring a Shiny server."),
            h4("How to use:"),
            tags$ol(
              tags$li("Set the boundaries for your sampling area using WGS84 coordinates"),
              tags$li("Choose the number of random points to generate"),
              tags$li("Click 'Generate Random Points' to create your sampling design"),
              tags$li("View the results on the map or in the data table"),
              tags$li("Download the points as a CSV file if needed")
            ),
            h4("Coordinate System:"),
            tags$p("This app uses the WGS84 (World Geodetic System 1984) coordinate system, which is the standard used by GPS devices and most mapping applications."),
            tags$ul(
              tags$li(strong("Latitude:"), " Ranges from -90째 (South) to 90째 (North)"),
              tags$li(strong("Longitude:"), " Ranges from -180째 (West) to 180째 (East)")
            ),


            h4("Limitations:"),
            p("This simplified version only supports random sampling. For more advanced methods like stratified sampling or CLHS, you would need the full version of the app running on a Shiny server.")
          )
        )
      )
    )
  )
)

# Server logic - Simplified for shinylive compatibility
server <- function(input, output, session) {
  # Reactive values to store data
  values <- reactiveValues(
    samplingPoints = NULL,
    pointsGenerated = FALSE
  )

  # Generate random sampling points
  observeEvent(input$runSampling, {
    # Validate inputs
    validate <- function() {
      if (input$lonmin >= input$lonmax) {
        showNotification("Longitude minimum must be less than Longitude maximum", type = "error")
        return(FALSE)
      }
      if (input$latmin >= input$latmax) {
        showNotification("Latitude minimum must be less than Latitude maximum", type = "error")
        return(FALSE)
      }
      return(TRUE)
    }

    if (!validate()) return(NULL)

    # Generate random points
    withProgress(message = 'Generating random points...', value = 0, {
      # Set seed for reproducibility
      set.seed(as.numeric(Sys.time()))

      # Number of points to generate
      n <- input$sampleSize

      # Generate points within the bounding box
      lon <- runif(n, input$lonmin, input$lonmax)
      lat <- runif(n, input$latmin, input$latmax)

      # Create data frame with points
      points_df <- data.frame(
        ID = 1:n,
        Longitude = round(lon, 2),
        Latitude = round(lat, 2),
        CoordSystem = rep("wgs84", n)
      )

      # Store in reactive values
      values$samplingPoints <- points_df
      values$pointsGenerated <- TRUE

      showNotification(paste(n, "random points generated successfully!"), type = "message")
    })
  })

  # Render the map with sampling points
  output$samplingMap <- renderLeaflet({
    # Create base map
    map <- leaflet() %>%
      addTiles() %>%
      addScaleBar(position = "bottomleft")

    # Add rectangle for WGS84 coordinates
    map <- map %>%
      addRectangles(
        lng1 = input$lonmin, lat1 = input$latmin,
        lng2 = input$lonmax, lat2 = input$latmax,
        fillColor = "transparent",
        color = "blue",
        weight = 2,
        group = "bounding_box"
      )

    # Add points if available
    if (values$pointsGenerated && !is.null(values$samplingPoints)) {
      points <- values$samplingPoints

      # Add markers for each point
      map <- map %>%
        addCircleMarkers(
          data = points,
          lng = ~Longitude, lat = ~Latitude,
          radius = 5,
          color = "red",
          fillOpacity = 0.8,
          stroke = FALSE,
          group = "sampling_points"
        )

      # Add labels if requested
      if (input$addLabels) {
        map <- map %>%
          addLabelOnlyMarkers(
            data = points,
            lng = ~Longitude, lat = ~Latitude,
            label = ~as.character(ID),
            labelOptions = labelOptions(
              noHide = TRUE,
              direction = 'center',
              textOnly = TRUE
            )
          )
      }

      # Fit bounds to the sampling area
      map <- map %>%
        fitBounds(
          lng1 = input$lonmin - 0.1, lat1 = input$latmin - 0.1,
          lng2 = input$lonmax + 0.1, lat2 = input$latmax + 0.1
        )
    }

    # Add layer control
    map <- map %>%
      addLayersControl(
        overlayGroups = c("sampling_points", "bounding_box"),
        options = layersControlOptions(collapsed = FALSE)
      )

    return(map)
  })

  # Render the data table
  output$samplingTable <- renderDT({
    req(values$pointsGenerated, values$samplingPoints)

    # Get points data
    points <- values$samplingPoints

    # Remove CoordSystem column for display
    display_points <- points[, !names(points) %in% c("CoordSystem")]

    datatable(
      display_points,
      options = list(
        pageLength = 10,
        searching = FALSE
      ),
      rownames = FALSE
    )
  })

  # Render sampling statistics plot
  output$samplingStats <- renderPlot({
    req(values$pointsGenerated, values$samplingPoints)

    points <- values$samplingPoints

    # Create a plot showing the distribution of points
    par(mfrow = c(1, 2))

    # Longitude distribution
    hist(points$Longitude,
         main = "Longitude Distribution",
         xlab = "Longitude",
         col = "lightblue",
         border = "white")

    # Latitude distribution
    hist(points$Latitude,
         main = "Latitude Distribution",
         xlab = "Latitude",
         col = "lightgreen",
         border = "white")
  })

  # Render variable distribution plot
  output$variableDistribution <- renderPlot({
    req(values$pointsGenerated, values$samplingPoints)

    # Calculate distance between points
    points <- values$samplingPoints
    n <- nrow(points)

    # Create a distance matrix
    dist_matrix <- matrix(0, nrow = n, ncol = n)

    # Haversine formula for geographic coordinates
    for (i in 1:n) {
      for (j in 1:n) {
        if (i != j) {
          # Convert to radians
          lat1 <- points$Latitude[i] * pi / 180
          lon1 <- points$Longitude[i] * pi / 180
          lat2 <- points$Latitude[j] * pi / 180
          lon2 <- points$Longitude[j] * pi / 180

          # Haversine formula
          dlon <- lon2 - lon1
          dlat <- lat2 - lat1
          a <- sin(dlat/2)^2 + cos(lat1) * cos(lat2) * sin(dlon/2)^2
          c <- 2 * asin(sqrt(a))
          r <- 6371 # Earth radius in km
          dist_matrix[i, j] <- r * c
        }
      }
    }

    # Calculate minimum distance for each point
    min_dist <- apply(dist_matrix, 1, function(x) min(x[x > 0]))
    points$min_dist <- min_dist

    # Plot minimum distances
    boxplot(points$min_dist,
            main = "Minimum Distance Between Points",
            ylab = "Distance (km)",
            col = "lightblue")
  })

  # Download handler for data
  output$downloadData <- downloadHandler(
    filename = function() {
      paste0("random_points_", Sys.Date(), ".csv")
    },
    content = function(file) {
      req(values$pointsGenerated, values$samplingPoints)
      write.csv(values$samplingPoints, file, row.names = FALSE)
    }
  )
}

# Run the app
shinyApp(ui = ui, server = server)
```
